# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        # https://github.com/ruby/setup-ruby/releases/tag/v1.207.0
        uses: ruby/setup-ruby@4a9ddd6f338a97768b8006bf671dfbad383215f4
        with:
          ruby-version: '3.2' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      # 1) Діагностика: що саме зібралось
      - name: Debug: list built CSS/HTML
        run: |
          echo "== CSS files under _site/assets/css =="
          (ls -la _site/assets/css || true)
          echo
          echo "== First 200 HTML files under _site =="
          find _site -type f -name '*.html' | sed -n '1,200p'
          echo
          echo "== Grep for 'max-width: 50rem' in built CSS =="
          (grep -RIn "max-width:\s*50rem" _site/assets/css || true)

      # 2) Спроба №1: пропатчити ЗІБРАНИЙ CSS (де б він не був)
      - name: Patch built CSS in-place
        run: |
          set -e
          # Пройдемо по всіх CSS у _site та замінимо "max-width: 50rem" -> "max-width: none"
          # і ".main{... margin:auto}" -> "margin:0"
          shopt -s globstar nullglob
          patched=0
          for f in _site/assets/css/**/*.css _site/assets/css/*.css; do
            [ -f "$f" ] || continue
            before=$(grep -Eo "max-width:\s*50rem" "$f" | wc -l || true)
            sed -i -E 's/max-width:\s*50rem/max-width: none/g' "$f" || true
            # варіанти злиплого CSS
            sed -i -E 's/max-width:50rem/max-width:none/g' "$f" || true
            # margin:auto -> margin:0 (у .main)
            sed -i -E 's/([.]main[^{]*\{[^}]*?)margin:\s*auto;/\1margin: 0;/' "$f" || true
            after=$(grep -Eo "max-width:\s*50rem" "$f" | wc -l || true)
            if [ "$before" != "$after" ]; then
              echo ">> Patched $f (replaced $((before-after)) occurrence(s))"
              patched=1
            fi
          done
          if [ "$patched" -eq 1 ]; then
            echo ">> CSS PATCH DONE"
            exit 0
          else
            echo ">> No 'max-width: 50rem' found in CSS; will inject a separate fullwidth.css into HTML"
            exit 2
          fi

      # 3) Спроба №2 (спрацює лише якщо крок вище повернув код 2):
      - name: Inject fullwidth.css into index.html (TEST one page)
        if: failure()    # виконуємо якщо попередній step НЕ знайшов що патчити
        run: |
          set -e
          mkdir -p _site/assets/css
          cat > _site/assets/css/fullwidth.css <<'EOF'
  /* ---- FULLWIDTH PATCH (separate) ---- */
  .main{margin:0!important}
  @media (min-width:50rem){
  .main{position:relative;max-width:none!important;width:100%!important}
  .side-bar+.main{margin-left:15.5rem!important}
}
  .main-content-wrap{max-width:none!important}
  html,body{overflow-x:hidden}
  /* ---- /FULLWIDTH PATCH ---- */
  EOF
  TEST_PAGE="_site/index.html"
  if [ ! -f "$TEST_PAGE" ]; then
  echo "!! _site/index.html not found. Listing some HTML files:"
  find _site -type f -name '*.html' | sed -n '1,200p'
  exit 1
  fi
  BP="${{ steps.pages.outputs.base_path }}"
  # Вставляємо <link> перед ПЕРШИМ </head> у index.html
  sed -i "0,/<\/head>/s#</head>#<link rel=\"stylesheet\" href=\"${BP}/assets/css/fullwidth.css?v=${{ github.run_number }}\">\n</head>#" "$TEST_PAGE"
  echo ">> Injected head of index.html:"
  awk 'BEGIN{show=0}/<head>/{show=1}show;/<\/head>/{print;exit}' "$TEST_PAGE"

# 4) Перевірка: впевнитись, що або CSS пропатчений, або <link> додано
     - name: Verify patch/injection took effect
       run: |
    set -e
    ok=0
    if grep -RIn "max-width:\s*none" _site/assets/css >/dev/null 2>&1; then
      echo ">> Found 'max-width: none' in built CSS"
      ok=1
    fi
    if grep -RIn "fullwidth.css" _site/index.html >/dev/null 2>&1; then
      echo ">> index.html has link to fullwidth.css"
      ok=1
    fi
    if [ "$ok" -eq 1 ]; then
      echo ">> Verification OK"
      exit 0
    else
      echo "!! Verification FAILED. Dumping index.html <head>:"
      awk 'BEGIN{show=0}/<head>/{show=1}show;/<\/head>/{print;exit}' _site/index.html || true
      exit 1
    fi

      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        # https://github.com/ruby/setup-ruby/releases/tag/v1.207.0
        uses: ruby/setup-ruby@4a9ddd6f338a97768b8006bf671dfbad383215f4
        with:
          ruby-version: '3.2' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Inject full-width CSS patch (TEST one page)
        run: |
          set -e
            
          # 1) створюємо CSS з патчем у зібраному сайті
          mkdir -p _site/assets/css
          cat > _site/assets/css/fullwidth.css <<'EOF'
/* ---- FULLWIDTH PATCH (separate file) ---- */
.main{margin:0!important}
@media (min-width:50rem){
  .main{position:relative;max-width:none!important;width:100%!important}
  .side-bar+.main{margin-left:15.5rem!important}
  }
.main-content-wrap{max-width:none!important}
html,body{overflow-x:hidden}
/* ---- /FULLWIDTH PATCH ---- */
    EOF
    
    # 2) підключаємо ЛИШЕ в одну сторінку (змінюй за потреби)
    TEST_PAGE="_site/index.html"
    
    if [ ! -f "$TEST_PAGE" ]; then
    echo ">> Test page not found: $TEST_PAGE"
    echo ">> First 50 HTML files under _site:"
    find _site -type f -name '*.html' | head -n 50
    exit 1
    fi
    
    BP="${{ steps.pages.outputs.base_path }}"
    echo ">> Patching only $TEST_PAGE with link to ${BP}/assets/css/fullwidth.css"
    
    # Вставляємо <link> перед ПЕРШИМ </head> (тільки у TEST_PAGE)
    sed -i "0,/<\/head>/s#</head>#<link rel=\"stylesheet\" href=\"${BP}/assets/css/fullwidth.css?v=${{ github.run_number }}\">\n</head>#" "$TEST_PAGE"
    
    echo ">> Injected <head> snippet:"
    awk 'BEGIN{show=0}/<head>/{show=1}show;/<\/head>/{print;exit}' "$TEST_PAGE"    
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
